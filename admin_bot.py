import asyncio
import nest_asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.constants import ParseMode
import logging
from datetime import datetime, timedelta
import random
import string
import aiosqlite

nest_asyncio.apply()

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

from config import ADMIN_BOT_TOKEN, ADMIN_BOT_PASSWORD_1, ADMIN_BOT_PASSWORD_2, ADMIN_BOT_ID
from database import get_all_user_ids

DATABASE_FILE = 'bot_database.db'
SESSION_TIMEOUT = 300

async def check_session(user_id: int) -> bool:
    async with aiosqlite.connect(DATABASE_FILE) as db:
        async with db.execute(
            'SELECT session_active, last_active FROM admin_sessions WHERE admin_id = ?',
            (user_id,)
        ) as cursor:
            row = await cursor.fetchone()
            if not row or row[0] != 1:
                return False
            
            last_active = datetime.fromisoformat(row[1])
            if (datetime.now() - last_active).total_seconds() > SESSION_TIMEOUT:
                await db.execute(
                    'UPDATE admin_sessions SET session_active = 0 WHERE admin_id = ?',
                    (user_id,)
                )
                await db.commit()
                return False
            
            await db.execute(
                'UPDATE admin_sessions SET last_active = ? WHERE admin_id = ?',
                (datetime.now().isoformat(), user_id)
                )
            await db.commit()
            return True

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    if user.id != ADMIN_BOT_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    keyboard = [['–ë–æ—Ç']]
    from telegram import ReplyKeyboardMarkup
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º!",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    
    if user.id != ADMIN_BOT_ID:
        return
    
    if text == '–ë–æ—Ç':
        async with aiosqlite.connect(DATABASE_FILE) as db:
            await db.execute('''
                INSERT OR REPLACE INTO admin_sessions (admin_id, session_active, auth_step, last_active)
                VALUES (?, 0, 0, ?)
            ''', (user.id, datetime.now().isoformat()))
            await db.commit()
        
        context.user_data['awaiting_password'] = 1
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –ø–∞—Ä–æ–ª—å:")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    if user.id != ADMIN_BOT_ID:
        return
    
    text = update.message.text
    
    if context.user_data.get('awaiting_password') == 1:
        if text == ADMIN_BOT_PASSWORD_1:
            context.user_data['awaiting_password'] = 2
            await update.message.reply_text("‚úÖ –ü–µ—Ä–≤—ã–π –ø–∞—Ä–æ–ª—å –≤–µ—Ä–µ–Ω.\nüîê –í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –ø–∞—Ä–æ–ª—å:")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    elif context.user_data.get('awaiting_password') == 2:
        if text == ADMIN_BOT_PASSWORD_2:
            async with aiosqlite.connect(DATABASE_FILE) as db:
                await db.execute(
                    'UPDATE admin_sessions SET session_active = 1, last_active = ? WHERE admin_id = ?',
                    (datetime.now().isoformat(), user.id)
                )
                await db.commit()
            
            context.user_data.pop('awaiting_password', None)
            
            keyboard = [
                [InlineKeyboardButton("üì¢ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="push_notification")],
                [InlineKeyboardButton("üë• –°–ø–æ–Ω—Å–æ—Ä—ã", callback_data="sponsors")],
                [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å push", callback_data="delete_push")],
                [InlineKeyboardButton("‚ùå –£–±—Ä–∞—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–æ–≤", callback_data="remove_sponsors")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n"
                "‚è∞ *–¢–∞–π–º-–∞—É—Ç —Å–µ—Å—Å–∏–∏: 5 –º–∏–Ω—É—Ç*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            context.user_data.pop('awaiting_password', None)
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–Ω–æ–ø–∫–∏ '–ë–æ—Ç'.")
        return
    
    if not await check_session(user.id):
        await update.message.reply_text(
            "‚è∞ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ë–æ—Ç' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
        )
        return
    
    if context.user_data.get('state') == 'awaiting_push_text':
        context.user_data['push_text'] = text
        context.user_data['state'] = 'awaiting_push_lifetime'
        await update.message.reply_text(
            "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
            "‚Ä¢ `ever` ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è\n"
            "‚Ä¢ `24 —á–∞—Å–∞`\n"
            "‚Ä¢ `4 —á–∞—Å–∞ 6 –º–∏–Ω—É—Ç 9 —Å–µ–∫—É–Ω–¥`\n"
            "‚Ä¢ `1 —á–∞—Å 10 –º–∏–Ω—É—Ç`\n\n"
            "–§–æ—Ä–º–∞—Ç: —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã, —Å–µ–∫—É–Ω–¥—ã",
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif context.user_data.get('state') == 'awaiting_push_lifetime':
        push_text = context.user_data.get('push_text')
        
        if text.lower() == 'ever':
            lifetime = -1
        else:
            lifetime = parse_time_string(text)
            if lifetime is None:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
        
        push_id = generate_push_id()
        
        async with aiosqlite.connect(DATABASE_FILE) as db:
            await db.execute('''
                INSERT INTO push_messages (id, text, lifetime, active)
                VALUES (?, ?, ?, 1)
            ''', (push_id, push_text, lifetime))
            await db.commit()
        
        await broadcast_message(push_text, push_id, lifetime, context.bot)
        
        context.user_data.pop('state', None)
        context.user_data.pop('push_text', None)
        
        await update.message.reply_text(
            f"‚úÖ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!\n\n"
            f"üÜî –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥: `{push_id}`\n"
            f"üìù –¢–µ–∫—Å—Ç: {push_text[:50]}{'...' if len(push_text) > 50 else ''}\n"
            f"‚è∞ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏: {'–ë–µ—Å—Å—Ä–æ—á–Ω–æ' if lifetime == -1 else f'{lifetime} —Å–µ–∫—É–Ω–¥'}",
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif context.user_data.get('state') == 'awaiting_sponsors_count':
        try:
            count = int(text)
            if count <= 0 or count > 10:
                await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10.")
                return
            
            context.user_data['sponsors_count'] = count
            context.user_data['sponsors_links'] = []
            context.user_data['current_sponsor'] = 1
            context.user_data['state'] = 'awaiting_sponsor_link'
            
            await update.message.reply_text(f"‚úÖ –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ {count} —Å–ø–æ–Ω—Å–æ—Ä–æ–≤.\n\nüìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–ø–æ–Ω—Å–æ—Ä–∞ #1:")
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    
    elif context.user_data.get('state') == 'awaiting_sponsor_link':
        sponsors_count = context.user_data['sponsors_count']
        current = context.user_data['current_sponsor']
        
        if not text.startswith('http'):
            await update.message.reply_text("‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
            return
        
        context.user_data['sponsors_links'].append(text)
        
        if current < sponsors_count:
            context.user_data['current_sponsor'] += 1
            await update.message.reply_text(f"‚úÖ –°—Å—ã–ª–∫–∞ #{current} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n\nüìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–ø–æ–Ω—Å–æ—Ä–∞ #{current + 1}:")
        else:
            async with aiosqlite.connect(DATABASE_FILE) as db:
                for idx, link in enumerate(context.user_data['sponsors_links'], 1):
                    await db.execute('''
                        INSERT INTO sponsors (link, position, active)
                        VALUES (?, ?, 1)
                    ''', (link, idx))
                await db.commit()
            
            context.user_data.pop('state', None)
            context.user_data.pop('sponsors_count', None)
            context.user_data.pop('sponsors_links', None)
            context.user_data.pop('current_sponsor', None)
            
            await update.message.reply_text(
                f"‚úÖ –í—Å–µ {sponsors_count} —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!\n\n"
                "–û–Ω–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ."
            )
    
    elif context.user_data.get('state') == 'awaiting_push_delete_code':
        async with aiosqlite.connect(DATABASE_FILE) as db:
            async with db.execute('SELECT text FROM push_messages WHERE id = ? AND active = 1', (text,)) as cursor:
                row = await cursor.fetchone()
                if row:
                    await db.execute('UPDATE push_messages SET active = 0 WHERE id = ?', (text,))
                    await db.commit()
                    
                    context.user_data.pop('state', None)
                    await update.message.reply_text(
                        f"‚úÖ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ `{text}` —É–¥–∞–ª–µ–Ω–æ!\n\n"
                        f"–¢–µ–∫—Å—Ç –±—ã–ª: {row[0][:50]}...",
                        parse_mode=ParseMode.MARKDOWN
                    )
                else:
                    await update.message.reply_text(f"‚ùå Push —Å –∫–æ–¥–æ–º `{text}` –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode=ParseMode.MARKDOWN)
    
    elif context.user_data.get('state') == 'awaiting_sponsor_remove':
        if text.lower() == 'all':
            async with aiosqlite.connect(DATABASE_FILE) as db:
                async with db.execute('SELECT COUNT(*) FROM sponsors WHERE active = 1') as cursor:
                    row = await cursor.fetchone()
                    count = row[0] if row else 0
                
                await db.execute('UPDATE sponsors SET active = 0')
                await db.commit()
            
            context.user_data.pop('state', None)
            await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} —Å–ø–æ–Ω—Å–æ—Ä–æ–≤.")
        
        elif text.lower() == 'one':
            context.user_data['state'] = 'awaiting_sponsor_number'
            await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ø–æ–Ω—Å–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        else:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ 'all' –∏–ª–∏ 'one'.")
    
    elif context.user_data.get('state') == 'awaiting_sponsor_number':
        try:
            number = int(text)
            
            async with aiosqlite.connect(DATABASE_FILE) as db:
                async with db.execute(
                    'SELECT id FROM sponsors WHERE position = ? AND active = 1',
                    (number,)
                ) as cursor:
                    row = await cursor.fetchone()
                    if row:
                        await db.execute('UPDATE sponsors SET active = 0 WHERE id = ?', (row[0],))
                        
                        async with db.execute('SELECT id, position FROM sponsors WHERE active = 1 ORDER BY position') as cursor2:
                            rows = await cursor2.fetchall()
                            for idx, (sponsor_id, _) in enumerate(rows, 1):
                                await db.execute('UPDATE sponsors SET position = ? WHERE id = ?', (idx, sponsor_id))
                        
                        await db.commit()
                        
                        context.user_data.pop('state', None)
                        await update.message.reply_text(f"‚úÖ –°–ø–æ–Ω—Å–æ—Ä #{number} —É–¥–∞–ª–µ–Ω. –ù–æ–º–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
                    else:
                        await update.message.reply_text(f"‚ùå –°–ø–æ–Ω—Å–æ—Ä #{number} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    
    if user.id != ADMIN_BOT_ID:
        return
    
    if not await check_session(user.id):
        await query.edit_message_text(
            "‚è∞ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ë–æ—Ç' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
        )
        return
    
    data = query.data
    
    if data == 'push_notification':
        context.user_data['state'] = 'awaiting_push_text'
        await query.edit_message_text(
            "üì¢ *Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ*\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:",
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif data == 'sponsors':
        context.user_data['state'] = 'awaiting_sponsors_count'
        await query.edit_message_text(
            "üë• *–°–ø–æ–Ω—Å–æ—Ä—ã*\n\n"
            "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ (1-10):",
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif data == 'delete_push':
        context.user_data['state'] = 'awaiting_push_delete_code'
        await query.edit_message_text(
            "üóë *–£–¥–∞–ª–∏—Ç—å push*\n\n"
            "üÜî –í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è:",
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif data == 'remove_sponsors':
        context.user_data['state'] = 'awaiting_sponsor_remove'
        await query.edit_message_text(
            "‚ùå *–£–±—Ä–∞—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–æ–≤*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ:\n"
            "‚Ä¢ `all` ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤\n"
            "‚Ä¢ `one` ‚Äî —É–¥–∞–ª–∏—Ç—å –æ–¥–Ω–æ–≥–æ —Å–ø–æ–Ω—Å–æ—Ä–∞",
            parse_mode=ParseMode.MARKDOWN
        )

def parse_time_string(time_str: str) -> Optional[int]:
    try:
        total_seconds = 0
        parts = time_str.lower().split()
        
        i = 0
        while i < len(parts):
            try:
                value = int(parts[i])
                unit = parts[i + 1] if i + 1 < len(parts) else ''
                
                if '—á–∞—Å' in unit or 'hour' in unit:
                    total_seconds += value * 3600
                elif '–º–∏–Ω' in unit or 'min' in unit:
                    total_seconds += value * 60
                elif '—Å–µ–∫' in unit or 'sec' in unit:
                    total_seconds += value
                
                i += 2
            except (ValueError, IndexError):
                i += 1
        
        return total_seconds if total_seconds > 0 else None
    except:
        return None

def generate_push_id() -> str:
    return ''.join(random.choices(string.ascii_letters + string.digits, k=10))

async def broadcast_message(text: str, push_id: str, lifetime: int, bot):
    user_ids = await get_all_user_ids()
    
    for user_id in user_ids:
        try:
            await bot.send_message(
                chat_id=user_id,
                text=f"üì¢ *–û–±—ä—è–≤–ª–µ–Ω–∏–µ*\n\n{text}",
                parse_mode=ParseMode.MARKDOWN
            )
            await asyncio.sleep(0.05)
        except Exception as e:
            logger.error(f"Failed to send push to {user_id}: {e}")
    
    if lifetime > 0:
        asyncio.create_task(auto_delete_push(push_id, lifetime))

async def auto_delete_push(push_id: str, lifetime: int):
    await asyncio.sleep(lifetime)
    async with aiosqlite.connect(DATABASE_FILE) as db:
        await db.execute('UPDATE push_messages SET active = 0 WHERE id = ?', (push_id,))
        await db.commit()
    logger.info(f"Push {push_id} auto-deleted after {lifetime} seconds")

def main():
    application = Application.builder().token(ADMIN_BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex('^–ë–æ—Ç$'), button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(callback_handler))
    
    logger.info("–ê–¥–º–∏–Ω-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()
