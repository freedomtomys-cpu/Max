import asyncio
import nest_asyncio
import os
import uuid
import re
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.constants import ParseMode
import database as db
import downloader
import payments
import referral_system as ref
from config import TELEGRAM_TOKEN, PACKAGES, FREE_DOWNLOAD_LIMIT, ADMIN_IDS, BOT_USERNAME
import logging

nest_asyncio.apply()

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def escape_markdown(text: str) -> str:
    """Escape special characters for Telegram MarkdownV2"""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

async def delete_message_later(context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: int, delay: int = 20):
    await asyncio.sleep(delay)
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
    except:
        pass

async def delete_push_after_timeout(context: ContextTypes.DEFAULT_TYPE, message_id: str, timeout: int):
    await asyncio.sleep(timeout)
    
    recipients = await db.get_push_recipients(message_id)
    for recipient in recipients:
        try:
            await context.bot.delete_message(
                chat_id=recipient['user_id'],
                message_id=recipient['message_id']
            )
        except:
            pass
    
    await db.delete_push_message(message_id)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await db.add_user(user.id, user.username)
    
    if await db.is_user_blocked(user.id):
        await update.message.reply_text(
            "üö´ *–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω*\n\n"
            "–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    referred_by = None
    if context.args and len(context.args) > 0:
        ref_code = context.args[0]
        if ref_code.startswith('ref'):
            ref_code = ref_code[3:]
            referrer_id = await ref.get_user_by_referral_code(ref_code)
            if referrer_id and referrer_id != user.id:
                referred_by = referrer_id
    
    await ref.create_referral_account(user.id, referred_by)
    
    if user.id in ADMIN_IDS:
        keyboard = [
            ['üìå Pinterest', 'üéµ TikTok'],
            ['üì¶ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞'],
            ['üíé Plus+', 'üë§ My Account'],
            ['üîß Admin Panel']
        ]
    else:
        keyboard = [
            ['üìå Pinterest', 'üéµ TikTok'],
            ['üì¶ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞'],
            ['üíé Plus+', 'üë§ My Account']
        ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    welcome_text = "‚ö° *–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî MaxSaver* ‚ö°\n\n" \
        "–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ *TikTok* –∏ *Pinterest* –±–µ–∑ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤:\n" \
        "‚úÖ –ë—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ\n" \
        "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ 4K\n" \
        "‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –≤ MP3\n\n" \
        "üì≤ *–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É* ‚Äî –∏ –ø–æ–ª—É—á–∏—à—å –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª!"
    
    if referred_by:
        welcome_text += "\n\nüéÅ *–¢—ã –ø–æ–ª—É—á–∏–ª 10 –º–æ–Ω–µ—Ç* –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!"
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    
    if await db.is_user_blocked(user.id):
        await update.message.reply_text(
            "üö´ *–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω*",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    if text in ['üìå Pinterest', 'üéµ TikTok']:
        await update.message.reply_text(
            "üìé *–û—Ç–ª–∏—á–Ω–æ!* –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É üé•\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:\n"
            "‚Ä¢ TikTok (–±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞)\n"
            "‚Ä¢ Pinterest (–≤–∏–¥–µ–æ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)\n\n"
            "–ü—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É —Å—é–¥–∞ üëá",
            parse_mode=ParseMode.MARKDOWN
        )
        context.user_data['waiting_for_link'] = text
    
    elif text == 'üì¶ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞':
        has_mass = await db.has_feature(user.id, 'mass_download')
        if not has_mass:
            keyboard = [[InlineKeyboardButton("üíé –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é", callback_data="buy_mass_download")]]
            await update.message.reply_text(
                "üîí *–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ ‚Äî –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è*\n\n"
                "–° –Ω–µ–π —Ç—ã —Å–º–æ–∂–µ—à—å:\n"
                "üì¶ –°–∫–∞—á–∏–≤–∞—Ç—å –¥–æ 10 –≤–∏–¥–µ–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\n"
                "‚ö° –≠–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è\n"
                "üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n\n"
                "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏!\n\n"
                "üí∞ *–¶–µ–Ω–∞:* 75 ‚ÇΩ –Ω–∞ –º–µ—Å—è—Ü",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text(
                "üì¶ *–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n\n"
                "*–ü—Ä–∏–º–µ—Ä:*\n"
                "`https://www.tiktok.com/@user/video/123\n"
                "https://www.tiktok.com/@user/video/456\n"
                "https://pin.it/abc123`\n\n"
                "‚úÖ –î–æ 10 —Å—Å—ã–ª–æ–∫ –∑–∞ —Ä–∞–∑\n"
                "‚úÖ TikTok –∏ Pinterest\n"
                "‚úÖ –í—Å–µ –≤–∏–¥–µ–æ —Å–∫–∞—á–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
                parse_mode=ParseMode.MARKDOWN
            )
    
    elif text == 'üíé Plus+':
        await show_packages(update, context)
    
    elif text == 'üë§ My Account':
        await show_account(update, context)
    
    elif text == 'üîß Admin Panel' and user.id in ADMIN_IDS:
        await show_admin_panel(update, context)

async def show_packages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("Full ‚Äî 149 ‚ÇΩ / –º–µ—Å—è—Ü", callback_data="buy_full")],
        [InlineKeyboardButton("Full+ ‚Äî 1099 ‚ÇΩ / –≥–æ–¥", callback_data="buy_full_plus")],
        [InlineKeyboardButton("4K + –ë–µ–∑–ª–∏–º–∏—Ç ‚Äî 99 ‚ÇΩ", callback_data="buy_4k_unlimited")],
        [InlineKeyboardButton("–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ ‚Äî 75 ‚ÇΩ", callback_data="buy_mass_download")],
        [InlineKeyboardButton("–ë–µ–∑–ª–∏–º–∏—Ç –Ω–∞ –≤–∏–¥–µ–æ ‚Äî 75 ‚ÇΩ", callback_data="buy_unlimited")],
        [InlineKeyboardButton("4K ‚Äî 75 ‚ÇΩ", callback_data="buy_4k")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üíé *–†–∞–∑–¥–µ–ª Plus+*\n\n"
        "–ü–æ–ª—É—á–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "üöÄ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ\n"
        "üé¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 4K –≤–∏–¥–µ–æ\n"
        "üì¶ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞–∫–µ—Ç üëá",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def show_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    subs = await db.get_user_subscriptions(user.id)
    features = await db.get_active_features(user.id)
    
    username_display = f"@{user.username}" if user.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    text = f"üë§ *–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç*\n\n"
    text += f"–ù–∏–∫: {escape_markdown(username_display)}\n"
    text += f"ID: `{user.id}`\n\n"
    
    if subs:
        text += "*‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
        feature_names = {
            '4k': '4K',
            'mass_download': '–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞',
            'unlimited': '–ë–µ–∑–ª–∏–º–∏—Ç'
        }
        
        shown_features = set()
        for sub in subs:
            feature = sub['feature']
            if feature not in shown_features:
                expires = sub['expires_at'].split()[0] if ' ' in sub['expires_at'] else sub['expires_at']
                expires_parts = expires.split('-')
                if len(expires_parts) == 3:
                    expires = f"{expires_parts[2]}.{expires_parts[1]}.{expires_parts[0]}"
                text += f"‚Ä¢ {feature_names.get(feature, feature)} ‚Äî –¥–æ {expires}\n"
                shown_features.add(feature)
        
        all_features = {'4k', 'mass_download', 'unlimited'}
        unavailable = all_features - shown_features
        if unavailable:
            text += "\n*üîí –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
            for feature in unavailable:
                text += f"‚Ä¢ {feature_names.get(feature, feature)}\n"
    else:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.\n\n"
        text += "üí° –û—Ç–∫—Ä–æ–π —Ä–∞–∑–¥–µ–ª *üíéPlus\\+*, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å:\n"
        text += "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ\n"
        text += "‚Ä¢ –í–∏–¥–µ–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ 4K\n"
        text += "‚Ä¢ –ú–∞—Å—Å–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É"
    
    keyboard = [[InlineKeyboardButton("üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="referral_system")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    
    if await db.is_user_blocked(user.id):
        await update.message.reply_text(
            "üö´ *–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω*",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    if text.startswith('push:') and user.id in ADMIN_IDS:
        push_text = text[5:].strip()
        if not push_text:
            await update.message.reply_text(
                "‚ùå –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: `push:—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è`",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        context.user_data['push_text'] = push_text
        context.user_data['admin_action'] = 'push_lifetime'
        await update.message.reply_text(
            "‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ß–ß:–ú–ú`:\n\n"
            "*–ü—Ä–∏–º–µ—Ä—ã:*\n"
            "‚Ä¢ `ever` - –Ω–µ —É–¥–∞–ª—è—Ç—å –Ω–∏–∫–æ–≥–¥–∞\n"
            "‚Ä¢ `00:05` - 5 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ `01:30` - 1 —á–∞—Å 30 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ `24:00` - 24 —á–∞—Å–∞\n"
            "‚Ä¢ `48:30` - 48 —á–∞—Å–æ–≤ 30 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ `73:00` - 73 —á–∞—Å–∞",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    if user.id in ADMIN_IDS and 'admin_action' in context.user_data:
        action = context.user_data.pop('admin_action')
        parts = text.strip().split()
        
        try:
            if action == 'push_lifetime':
                push_text = context.user_data.pop('push_text', '')
                lifetime_str = text.strip().lower()
                
                if lifetime_str == 'ever':
                    lifetime = -1
                else:
                    if ':' in lifetime_str:
                        try:
                            parts = lifetime_str.split(':')
                            if len(parts) == 2:
                                hours = int(parts[0])
                                minutes = int(parts[1])
                                lifetime = hours * 3600 + minutes * 60
                            else:
                                await update.message.reply_text(
                                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
                                    "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç `–ß–ß:–ú–ú` (–Ω–∞–ø—Ä–∏–º–µ—Ä: `24:30` –∏–ª–∏ `00:05`)\n"
                                    "–ò–ª–∏ `ever` –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
                                    parse_mode=ParseMode.MARKDOWN
                                )
                                return
                        except ValueError:
                            await update.message.reply_text(
                                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
                                "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç `–ß–ß:–ú–ú` (–Ω–∞–ø—Ä–∏–º–µ—Ä: `24:30` –∏–ª–∏ `00:05`)\n"
                                "–ò–ª–∏ `ever` –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
                                parse_mode=ParseMode.MARKDOWN
                            )
                            return
                    else:
                        await update.message.reply_text(
                            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
                            "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç `–ß–ß:–ú–ú` (–Ω–∞–ø—Ä–∏–º–µ—Ä: `24:30` –∏–ª–∏ `00:05`)\n"
                            "–ò–ª–∏ `ever` –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
                            parse_mode=ParseMode.MARKDOWN
                        )
                        return
                
                message_id = str(uuid.uuid4())[:8]
                await db.create_push_message(message_id, push_text, lifetime)
                
                user_ids = await db.get_all_user_ids()
                sent_count = 0
                for uid in user_ids:
                    try:
                        msg = await context.bot.send_message(
                            chat_id=uid,
                            text=push_text,
                            parse_mode=ParseMode.MARKDOWN
                        )
                        await db.save_push_recipient(message_id, uid, msg.message_id)
                        sent_count += 1
                        if sent_count % 30 == 0:
                            await asyncio.sleep(1)
                    except:
                        pass
                
                await update.message.reply_text(
                    f"‚úÖ Push –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
                    f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                    f"üÜî ID —Å–æ–æ–±—â–µ–Ω–∏—è: `{message_id}`\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è",
                    parse_mode=ParseMode.MARKDOWN
                )
                
                if lifetime > 0:
                    asyncio.create_task(delete_push_after_timeout(context, message_id, lifetime))
                return
            
            elif action == 'delete_push':
                message_id = text.strip()
                push_msg = await db.get_push_message(message_id)
                if push_msg:
                    recipients = await db.get_push_recipients(message_id)
                    deleted_count = 0
                    for recipient in recipients:
                        try:
                            await context.bot.delete_message(
                                chat_id=recipient['user_id'],
                                message_id=recipient['message_id']
                            )
                            deleted_count += 1
                        except:
                            pass
                    
                    await db.delete_push_message(message_id)
                    await update.message.reply_text(
                        f"‚úÖ Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ `{message_id}` —É–¥–∞–ª–µ–Ω–æ\n"
                        f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {deleted_count}",
                        parse_mode=ParseMode.MARKDOWN
                    )
                else:
                    await update.message.reply_text("‚ùå Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ")
                return
            
            elif action == 'add_sponsors':
                text_input = text.strip()
                
                if text_input.startswith('S:'):
                    try:
                        sponsor_count = int(text_input[2:].strip())
                        context.user_data['sponsor_count'] = sponsor_count
                        context.user_data['sponsor_links'] = []
                        context.user_data['admin_action'] = 'add_sponsor_link'
                        await update.message.reply_text(
                            f"üìù –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –¥–ª—è —Å–ø–æ–Ω—Å–æ—Ä–∞ ‚Ññ1 –∏–∑ {sponsor_count} –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                            f"`W:—Å—Å—ã–ª–∫–∞_–Ω–∞_–∫–∞–Ω–∞–ª`"
                        )
                    except ValueError:
                        await update.message.reply_text(
                            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
                            "–ò—Å–ø–æ–ª—å–∑—É–π: `S:—á–∏—Å–ª–æ` (–Ω–∞–ø—Ä–∏–º–µ—Ä, S:3)",
                            parse_mode=ParseMode.MARKDOWN
                        )
                else:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π: `S:—á–∏—Å–ª–æ` –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤\n"
                        "–ù–∞–ø—Ä–∏–º–µ—Ä: `S:3`",
                        parse_mode=ParseMode.MARKDOWN
                    )
                return
            
            elif action == 'add_sponsor_link':
                text_input = text.strip()
                
                if text_input.startswith('W:'):
                    link = text_input[2:].strip()
                    if not link:
                        await update.message.reply_text("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π!")
                        return
                    
                    context.user_data['sponsor_links'].append(link)
                    current = len(context.user_data['sponsor_links'])
                    total = context.user_data['sponsor_count']
                    
                    if current < total:
                        context.user_data['admin_action'] = 'add_sponsor_link'
                        await update.message.reply_text(
                            f"üìù –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –¥–ª—è —Å–ø–æ–Ω—Å–æ—Ä–∞ ‚Ññ{current + 1} –∏–∑ {total} –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                            f"`W:—Å—Å—ã–ª–∫–∞_–Ω–∞_–∫–∞–Ω–∞–ª`"
                        )
                        return
                    else:
                        for link in context.user_data['sponsor_links']:
                            await db.add_sponsor(link)
                        
                        context.user_data.pop('sponsor_count', None)
                        context.user_data.pop('sponsor_links', None)
                        
                        await update.message.reply_text(
                            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {total} —Å–ø–æ–Ω—Å–æ—Ä–æ–≤!\n\n"
                            "–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º."
                        )
                        return
                else:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π: `W:—Å—Å—ã–ª–∫–∞` –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª\n"
                        "–ù–∞–ø—Ä–∏–º–µ—Ä: `W:https://t.me/channel`",
                        parse_mode=ParseMode.MARKDOWN
                    )
                    return
            
            elif action == 'remove_sponsors':
                choice = text.strip().lower()
                if choice == 'all':
                    await db.delete_all_sponsors()
                    await update.message.reply_text("‚úÖ –í—Å–µ —Å–ø–æ–Ω—Å–æ—Ä—ã —É–¥–∞–ª–µ–Ω—ã")
                elif choice == 'one':
                    context.user_data['admin_action'] = 'remove_sponsor_number'
                    sponsors = await db.get_active_sponsors()
                    if sponsors:
                        text_msg = "–¢–µ–∫—É—â–∏–µ —Å–ø–æ–Ω—Å–æ—Ä—ã:\n\n"
                        for s in sponsors:
                            text_msg += f"–°–ø–æ–Ω—Å–æ—Ä ‚Ññ{s['position']}: {s['link']}\n"
                        text_msg += "\n–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Å–ø–æ–Ω—Å–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
                        await update.message.reply_text(text_msg)
                    else:
                        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤")
                    return
                else:
                    await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π `all` –∏–ª–∏ `one`", parse_mode=ParseMode.MARKDOWN)
                return
            
            elif action == 'remove_sponsor_number':
                sponsor_num = int(text.strip())
                sponsors = await db.get_active_sponsors()
                sponsor_to_delete = next((s for s in sponsors if s['position'] == sponsor_num), None)
                if sponsor_to_delete:
                    await db.delete_sponsor(sponsor_to_delete['id'])
                    await update.message.reply_text(f"‚úÖ –°–ø–æ–Ω—Å–æ—Ä ‚Ññ{sponsor_num} —É–¥–∞–ª–µ–Ω")
                else:
                    await update.message.reply_text(f"‚ùå –°–ø–æ–Ω—Å–æ—Ä ‚Ññ{sponsor_num} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            elif action == 'user_info' and len(parts) >= 1:
                target_id = int(parts[0])
                user_info = await db.get_user_info(target_id)
                if user_info:
                    subs = await db.get_user_subscriptions(target_id)
                    ref_info = await ref.get_referral_info(target_id)
                    blocked_status = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user_info['is_blocked'] else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
                    username = f"@{user_info['username']}" if user_info['username'] else "–ù–µ —É–∫–∞–∑–∞–Ω"
                    
                    info_text = f"üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:*\n\n"
                    info_text += f"ID: `{target_id}`\n"
                    info_text += f"–ù–∏–∫: {escape_markdown(username)}\n"
                    info_text += f"–°—Ç–∞—Ç—É—Å: {blocked_status}\n"
                    info_text += f"–ü–µ—Ä–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ: {user_info['first_seen']}\n\n"
                    
                    if ref_info:
                        info_text += f"üí∞ *–ë–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç:* {ref_info['coins_balance']}\n"
                        info_text += f"üë• *–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:* {ref_info['total_referrals']}\n\n"
                    
                    if subs:
                        info_text += "*–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:*\n"
                        for sub in subs:
                            info_text += f"‚Ä¢ {sub['feature']} - –¥–æ {sub['expires_at']}\n"
                    else:
                        info_text += "–ü–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç"
                    
                    await update.message.reply_text(info_text, parse_mode=ParseMode.MARKDOWN)
                else:
                    await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            elif action == 'block' and len(parts) >= 1:
                target_id = int(parts[0])
                await db.block_user(target_id)
                await update.message.reply_text(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                return
            
            elif action == 'unblock' and len(parts) >= 1:
                target_id = int(parts[0])
                await db.unblock_user(target_id)
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                return
            
            elif action == 'give_package' and len(parts) >= 2:
                target_id = int(parts[0])
                package_key = parts[1]
                package = PACKAGES.get(package_key)
                
                if package:
                    existing_subs = await db.get_user_subscriptions(target_id)
                    has_features = set()
                    for sub in existing_subs:
                        has_features.add(sub['feature'])
                    
                    new_features = set(package['features'])
                    already_has = new_features & has_features
                    
                    if already_has:
                        features_list = ', '.join(already_has)
                        await update.message.reply_text(
                            f"‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —É–∂–µ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏: {features_list}\n\n"
                            f"–ü–∞–∫–µ—Ç {package['name']} –≤—Å–µ —Ä–∞–≤–Ω–æ –≤—ã–¥–∞–Ω, –≤—Ä–µ–º—è –ø—Ä–æ–¥–ª–µ–Ω–æ."
                        )
                    
                    await db.add_subscription(target_id, package['features'], package['duration_days'])
                    
                    try:
                        await context.bot.send_message(
                            chat_id=target_id,
                            text=f"üéÅ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n\n"
                                 f"–¢–µ–±–µ –±—ã–ª –≤—ã–¥–∞–Ω –ø–∞–∫–µ—Ç *{package['name']}*!\n"
                                 f"–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é! ‚ö°",
                            parse_mode=ParseMode.MARKDOWN
                        )
                    except:
                        pass
                    
                    await update.message.reply_text(f"‚úÖ –ü–∞–∫–µ—Ç {package['name']} –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
                else:
                    await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–∫–µ—Ç")
                return
            
            elif action == 'remove_feature' and len(parts) >= 2:
                target_id = int(parts[0])
                feature = parts[1]
                await db.remove_user_feature(target_id, feature)
                await update.message.reply_text(f"‚úÖ –§—É–Ω–∫—Ü–∏—è {feature} —É–¥–∞–ª–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}")
                return
            
            elif action == 'removeall' and len(parts) >= 1:
                target_id = int(parts[0])
                await db.remove_all_user_features(target_id)
                await update.message.reply_text(f"‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}")
                return
            
            elif action == 'extend' and len(parts) >= 3:
                target_id = int(parts[0])
                feature = parts[1]
                days = int(parts[2])
                await db.update_subscription_expiry(target_id, feature, days)
                await update.message.reply_text(f"‚úÖ –§—É–Ω–∫—Ü–∏—è {feature} –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}")
                return
        except (ValueError, IndexError):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return
    
    urls = downloader.extract_urls(text)
    
    if not urls:
        msg = await update.message.reply_text(
            "ü§î *–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è...*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å:\n"
            "‚Ä¢ TikTok\n"
            "‚Ä¢ Pinterest\n\n"
            "–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é –Ω–∏–∂–µ üëá",
            parse_mode=ParseMode.MARKDOWN
        )
        asyncio.create_task(delete_message_later(context, update.effective_chat.id, msg.message_id, 20))
        return
    
    has_mass = await db.has_feature(user.id, 'mass_download')
    
    if len(urls) > 1 and not has_mass:
        msg = await update.message.reply_text(
            "üö´ *–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞* ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–º–∏—É–º!\n\n"
            "–° –Ω–µ–π —Ç—ã —Å–º–æ–∂–µ—à—å:\n"
            "üì¶ –°–∫–∞—á–∏–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\n"
            "‚ö° –≠–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è\n\n"
            "–ü–æ–¥–∫–ª—é—á–∏ —Ñ—É–Ω–∫—Ü–∏—é –≤ —Ä–∞–∑–¥–µ–ª–µ üíé*Plus+*",
            parse_mode=ParseMode.MARKDOWN
        )
        asyncio.create_task(delete_message_later(context, update.effective_chat.id, msg.message_id, 20))
        return
    
    if len(urls) > 10:
        msg = await update.message.reply_text(
            "‚ö†Ô∏è *–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Å—ã–ª–æ–∫!*\n\n"
            "–ú–∞–∫—Å–∏–º—É–º: *10 –≤–∏–¥–µ–æ* –∑–∞ —Ä–∞–∑\n"
            "–°–µ–π—á–∞—Å: *{} –≤–∏–¥–µ–æ*\n\n"
            "–†–∞–∑–±–µ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π üëá".format(len(urls)),
            parse_mode=ParseMode.MARKDOWN
        )
        asyncio.create_task(delete_message_later(context, update.effective_chat.id, msg.message_id, 20))
        return
    
    if len(urls) > 1:
        keyboard = [
            [InlineKeyboardButton("üé• HD –∫–∞—á–µ—Å—Ç–≤–æ (720p)", callback_data=f"mass_quality_hd")],
            [InlineKeyboardButton("üì± –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (480p)", callback_data=f"mass_quality_medium")],
            [InlineKeyboardButton("üîΩ –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (360p)", callback_data=f"mass_quality_low")],
            [InlineKeyboardButton("üéß –¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ (MP3)", callback_data=f"mass_quality_audio")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        context.user_data['mass_urls'] = urls
        
        await update.message.reply_text(
            f"üì¶ *–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞*\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: *{len(urls)}*\n\n"
            f"–í—ã–±–µ—Ä–∏ –µ–¥–∏–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–µ–æ üëá",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        for url in urls:
            await process_video_url(update, context, url)

async def process_mass_download_video(query, context: ContextTypes.DEFAULT_TYPE, url: str, quality: str):
    user = query.from_user
    
    if not downloader.is_valid_url(url):
        return
    
    info = await downloader.extract_video_info_async(url)
    if not info:
        return
    
    try:
        audio_only = quality == 'audio'
        filename = await downloader.download_video(url, quality if quality != 'audio' else None, audio_only)
        
        if filename and os.path.exists(filename):
            file_size_mb = os.path.getsize(filename) / (1024 * 1024)
            
            if file_size_mb > 2000:
                os.remove(filename)
                return
            
            platform = 'pinterest' if 'pinterest.com' in url or 'pin.it' in url else 'tiktok'
            await db.add_download(user.id, platform)
            await ref.process_download_coins(user.id)
            
            try:
                if audio_only:
                    with open(filename, 'rb') as audio_file:
                        await query.message.reply_audio(
                            audio=audio_file,
                            caption="‚úÖ *–ì–æ—Ç–æ–≤–æ!*\n\nüéß –í–æ—Ç —Ç–≤–æ–π –∞—É–¥–∏–æ—Ñ–∞–π–ª",
                            parse_mode=ParseMode.MARKDOWN,
                            read_timeout=300,
                            write_timeout=300
                        )
                elif file_size_mb > 50:
                    await query.message.reply_document(
                        document=open(filename, 'rb'),
                        caption=f"‚úÖ *–ì–æ—Ç–æ–≤–æ!*\n\nüé¨ –í–∏–¥–µ–æ ({file_size_mb:.1f} MB)",
                        parse_mode=ParseMode.MARKDOWN,
                        read_timeout=1800,
                        write_timeout=1800
                    )
                else:
                    with open(filename, 'rb') as video_file:
                        await query.message.reply_video(
                            video=video_file,
                            caption="‚úÖ *–ì–æ—Ç–æ–≤–æ!*",
                            parse_mode=ParseMode.MARKDOWN,
                            supports_streaming=True,
                            read_timeout=300,
                            write_timeout=300
                        )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            finally:
                if os.path.exists(filename):
                    os.remove(filename)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

async def check_sponsors_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> bool:
    sponsors = await db.get_active_sponsors()
    if not sponsors:
        return True
    
    current_sponsors_ids = '_'.join([str(s['id']) for s in sponsors])
    
    checked_sponsors = await db.check_user_subscribed_sponsors(user_id)
    if checked_sponsors == current_sponsors_ids:
        return True
    
    keyboard = []
    for sponsor in sponsors:
        keyboard.append([InlineKeyboardButton(f"‚úÖ –°–ø–æ–Ω—Å–æ—Ä ‚Ññ{sponsor['position']}", url=sponsor['link'])])
    keyboard.append([InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"check_sponsor_{user_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üì¢ *–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤*\n\n"
        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    return False

async def process_video_url(update: Update, context: ContextTypes.DEFAULT_TYPE, url: str):
    user = update.effective_user
    
    sponsors_ok = await check_sponsors_subscription(update, context, user.id)
    if not sponsors_ok:
        return
    
    if not downloader.is_valid_url(url):
        msg = await update.message.reply_text(
            "‚ö†Ô∏è *–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è*\n\n"
            "–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å:\n"
            "‚úÖ TikTok\n"
            "‚úÖ Pinterest\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
            parse_mode=ParseMode.MARKDOWN
        )
        asyncio.create_task(delete_message_later(context, update.effective_chat.id, msg.message_id, 20))
        return
    
    info = await downloader.extract_video_info_async(url)
    if not info:
        msg = await update.message.reply_text(
            "üö´ *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞*\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω\n"
            "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º TikTok/Pinterest\n\n"
            "‚öôÔ∏è –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É",
            parse_mode=ParseMode.MARKDOWN
        )
        asyncio.create_task(delete_message_later(context, update.effective_chat.id, msg.message_id, 30))
        return
    
    has_unlimited = await db.has_feature(user.id, 'unlimited')
    if not has_unlimited:
        download_count = await db.get_download_count_24h(user.id)
        if download_count >= FREE_DOWNLOAD_LIMIT:
            keyboard = [[InlineKeyboardButton("üíé –û—Ç–∫—Ä—ã—Ç—å Plus+", callback_data="show_packages")]]
            msg = await update.message.reply_text(
                f"‚ö†Ô∏è *–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω!*\n\n"
                f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ: *{FREE_DOWNLOAD_LIMIT} –≤–∏–¥–µ–æ* –∑–∞ 24 —á–∞—Å–∞\n\n"
                "üöÄ –•–æ—á–µ—à—å –±–µ–∑–ª–∏–º–∏—Ç?\n"
                "–ü–æ–¥–∫–ª—é—á–∏ –ø–∞–∫–µ—Ç üíé*Plus+* –∏ —Å–∫–∞—á–∏–≤–∞–π —Å–∫–æ–ª—å–∫–æ —Ö–æ—á–µ—à—å!",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
            asyncio.create_task(delete_message_later(context, update.effective_chat.id, msg.message_id, 30))
            return
    
    download_id = str(uuid.uuid4())[:8]
    await db.store_pending_download(download_id, url, user.id)
    
    keyboard = []
    has_4k = await db.has_feature(user.id, '4k')
    
    if info['platform'] == 'tiktok':
        if info.get('formats'):
            for fmt in info['formats']:
                quality_id = fmt['format_id']
                quality_name = fmt['quality']
                keyboard.append([InlineKeyboardButton(f"üé• –í–∏–¥–µ–æ {quality_name} (–±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞)", callback_data=f"dl_{quality_id}_{download_id}")])
        else:
            keyboard.append([InlineKeyboardButton("üé• –í–∏–¥–µ–æ (–±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞)", callback_data=f"dl_hd_{download_id}")])
        keyboard.append([InlineKeyboardButton("üéß –ê—É–¥–∏–æ (MP3)", callback_data=f"dl_audio_{download_id}")])
    else:
        for fmt in info['formats']:
            quality = fmt['quality']
            if '2160' in quality or '4k' in quality.lower():
                keyboard.append([InlineKeyboardButton(f"üé• –í–∏–¥–µ–æ {quality} üíé", callback_data=f"dl_{quality}_{download_id}" if has_4k else f"need_4k")])
            else:
                keyboard.append([InlineKeyboardButton(f"üé• –í–∏–¥–µ–æ {quality}", callback_data=f"dl_{quality}_{download_id}")])
        
        keyboard.append([InlineKeyboardButton("üéß –ê—É–¥–∏–æ (MP3)", callback_data=f"dl_audio_{download_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    duration_str = downloader.format_duration(info['duration']) if info['duration'] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    text = f"üé¨ *–í–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω–æ!*\n\n"
    text += f"üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:*\n{info['title'][:80]}{'...' if len(info['title']) > 80 else ''}\n\n"
    text += f"‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {duration_str}\n\n"
    text += "–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è üëá"
    
    if info['thumbnail']:
        try:
            preview_msg = await update.message.reply_photo(
                photo=info['thumbnail'],
                caption=text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            context.user_data[f'preview_{url}'] = preview_msg.message_id
        except:
            preview_msg = await update.message.reply_text(
                text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            context.user_data[f'preview_{url}'] = preview_msg.message_id
    else:
        preview_msg = await update.message.reply_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        context.user_data[f'preview_{url}'] = preview_msg.message_id

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    data = query.data
    
    if await db.is_user_blocked(user.id):
        await query.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
        return
    
    if data.startswith('buy_'):
        package_key = data.replace('buy_', '')
        package = PACKAGES.get(package_key)
        
        if package:
            features_text = ""
            if '4k' in package['features']:
                features_text += "‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ 4K\n"
            if 'unlimited' in package['features']:
                features_text += "‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–π\n"
            if 'mass_download' in package['features']:
                features_text += "‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞\n"
            
            duration = f"{package['duration_days'] // 30} –º–µ—Å—è—Ü" if package['duration_days'] == 30 else "–≥–æ–¥"
            
            payment_info = payments.create_payment(
                package['price'],
                f"{package['name']} - {user.id}",
                user.id
            )
            
            if payment_info:
                await db.create_payment(user.id, package_key, package['price'], payment_info['id'])
                
                keyboard = [
                    [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_info['confirmation_url'])],
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{payment_info['id']}")],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                text = f"‚ú® *–ü–∞–∫–µ—Ç {package['name']}*\n\n"
                text += "*–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:*\n"
                text += features_text
                text += f"\nüí∞ *–¶–µ–Ω–∞:* {package['price']} ‚ÇΩ / {duration}"
                
                await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            else:
                await query.edit_message_text("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    elif data.startswith('check_sponsor_'):
        user_id_str = data.replace('check_sponsor_', '')
        user_id_int = int(user_id_str)
        sponsors = await db.get_active_sponsors()
        current_sponsors_ids = '_'.join([str(s['id']) for s in sponsors])
        
        await db.store_user_subscription_check(user_id_int, current_sponsors_ids)
        
        await query.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ", show_alert=True)
        try:
            await query.message.delete()
        except:
            pass
    
    elif data.startswith('check_'):
        payment_id = data.replace('check_', '')
        payment_info = payments.check_payment_status(payment_id)
        status = payment_info['status']
        paid = payment_info['paid']
        
        if status == 'succeeded' and paid:
            payment_data = await db.get_payment(payment_id)
            if payment_data and payment_data['status'] != 'succeeded':
                package_key = payment_data['package_key']
                package = PACKAGES.get(package_key)
                
                if package:
                    await db.add_subscription(user.id, package['features'], package['duration_days'])
                    await db.update_payment_status(payment_id, 'succeeded')
                    
                    msg = await query.edit_message_text(
                        "‚úÖ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!*\n\n"
                        "üéâ –§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞\n"
                        "–ú–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! ‚ö°",
                        parse_mode=ParseMode.MARKDOWN
                    )
                    asyncio.create_task(delete_message_later(context, query.message.chat_id, msg.message_id, 15))
            else:
                await query.edit_message_text(
                    "‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!*\n\n"
                    "–í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —ç—Ç–æ—Ç –ø–∞–∫–µ—Ç —Ä–∞–Ω–µ–µ.",
                    parse_mode=ParseMode.MARKDOWN
                )
        elif (status == 'pending' or status == 'waiting_for_capture') and paid:
            await query.edit_message_text(
                "‚è≥ *–û–ø–ª–∞—Ç–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è*\n\n"
                "–ü–ª–∞—Ç—ë–∂ –æ–ø–ª–∞—á–µ–Ω –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –±–∞–Ω–∫–æ–º.\n"
                "–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É' —Å–Ω–æ–≤–∞.",
                parse_mode=ParseMode.MARKDOWN
            )
        elif status == 'canceled':
            await query.edit_message_text(
                "‚ùå *–ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω*\n\n"
                "–ü–ª–∞—Ç—ë–∂ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.\n"
                "–ü–æ–ø—Ä–æ–±—É–π –æ–ø–ª–∞—Ç–∏—Ç—å —Å–Ω–æ–≤–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å'.",
                parse_mode=ParseMode.MARKDOWN
            )
        elif status == 'error':
            await query.edit_message_text(
                "‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞*\n\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂.",
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await query.edit_message_text(
                "‚ùå *–ü–ª–∞—Ç—ë–∂ –Ω–µ –æ–ø–ª–∞—á–µ–Ω*\n\n"
                "–ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω.\n\n"
                "1Ô∏è‚É£ –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å'\n"
                "2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –Æ–ö–∞—Å—Å—ã\n"
                "3Ô∏è‚É£ –í–µ—Ä–Ω–∏—Å—å –∏ –Ω–∞–∂–º–∏ 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'",
                parse_mode=ParseMode.MARKDOWN
            )
    
    elif data == 'need_4k':
        await query.answer("‚ö†Ô∏è 4K –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π!\n\n–ü–æ–¥–∫–ª—é—á–∏ –ø–∞–∫–µ—Ç üíé4K –∏–ª–∏ Full –≤ —Ä–∞–∑–¥–µ–ª–µ Plus+", show_alert=True)
    
    elif data.startswith('mass_quality_'):
        quality_type = data.replace('mass_quality_', '')
        urls = context.user_data.get('mass_urls', [])
        
        if not urls:
            await query.answer("‚ùå –û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ URL –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        quality_map = {
            'hd': '720p',
            'medium': '480p',
            'low': '360p',
            'audio': 'audio'
        }
        
        selected_quality = quality_map.get(quality_type, 'hd')
        
        await query.edit_message_text(
            f"üì¶ *–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞*\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: *{len(urls)}*\n"
            f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0/{len(urls)}\n\n"
            f"‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...",
            parse_mode=ParseMode.MARKDOWN
        )
        
        status_msg = query.message
        
        for idx, url in enumerate(urls, 1):
            try:
                await status_msg.edit_text(
                    f"üì¶ *–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞*\n\n"
                    f"–ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: *{len(urls)}*\n"
                    f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {idx-1}/{len(urls)}\n\n"
                    f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ {idx}...",
                    parse_mode=ParseMode.MARKDOWN
                )
            except:
                pass
            
            await process_mass_download_video(query, context, url, selected_quality)
        
        try:
            await status_msg.edit_text(
                f"‚úÖ *–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
                f"–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: *{len(urls)} –≤–∏–¥–µ–æ*\n\n"
                f"–í—Å–µ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—ã—à–µ üëÜ",
                parse_mode=ParseMode.MARKDOWN
            )
            asyncio.create_task(delete_message_later(context, status_msg.chat_id, status_msg.message_id, 30))
        except:
            pass
        
        context.user_data.pop('mass_urls', None)
    
    elif data == 'referral_system':
        ref_info = await ref.get_referral_info(user.id)
        if ref_info:
            ref_link = f"https://t.me/{BOT_USERNAME}?start=ref{ref_info['referral_code']}"
            
            text = "üéÅ *–ü—Ä–∏–≥–ª–∞—à–∞–π –∏ –ø–æ–ª—É—á–∞–π –º–æ–Ω–µ—Ç—ã!*\n\n"
            text += "–î–µ–ª–∏—Å—å —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π, –∑–æ–≤–∏ –¥—Ä—É–∑–µ–π –∏ –æ—Ç–∫—Ä—ã–≤–∞–π —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n\n"
            text += f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: *{ref_info['coins_balance']}* –º–æ–Ω–µ—Ç\n"
            text += f"üë• –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: *{ref_info['total_referrals']}*\n"
            text += f"üíé –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: *{ref_info['total_earned_coins']}* –º–æ–Ω–µ—Ç\n"
            text += f"üéÅ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{int(ref_info['earned_from_referrals'])}* –º–æ–Ω–µ—Ç\n"
            text += f"üõí –ü–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—É–º–º—É: *{ref_info['total_spent_coins']}* –º–æ–Ω–µ—Ç\n\n"
            text += f"üìé *–¢–≤–æ—è —Å—Å—ã–ª–∫–∞:*\n`{ref_link}`\n\n"
            text += "–í—ã–±–µ—Ä–∏ –Ω–∞–≥—Ä–∞–¥—É üëá"
            
            keyboard = [
                [InlineKeyboardButton("üíé –ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –Ω–∞ –≥–æ–¥ ‚Äî 17 599 –º–æ–Ω–µ—Ç", callback_data="ref_buy_full_year")],
                [InlineKeyboardButton("üíé –ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –Ω–∞ –º–µ—Å—è—Ü ‚Äî 2 600 –º–æ–Ω–µ—Ç", callback_data="ref_buy_full_month")],
                [InlineKeyboardButton("üé¨ 4K + –ë–µ–∑–ª–∏–º–∏—Ç ‚Äî 1 800 –º–æ–Ω–µ—Ç", callback_data="ref_buy_4k_unlimited")],
                [InlineKeyboardButton("üì¶ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ ‚Äî 360 –º–æ–Ω–µ—Ç", callback_data="ref_buy_mass")],
                [InlineKeyboardButton("üí° –ö–∞–∫ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π", callback_data="ref_how_to")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        else:
            await query.answer("–û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    
    elif data == 'ref_how_to':
        text = "üìö *–ö–∞–∫ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–æ–Ω–µ—Ç—ã*\n\n"
        text += "1Ô∏è‚É£ *PR GRAM*\n"
        text += "–î–æ–±–∞–≤—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –≤—Ä–æ–¥–µ [PR GRAM](https://t.me/gram_piarbot?start=1459753369), –≥–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ–±–º–µ–Ω–∏–≤–∞—é—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –≤—Ö–æ–¥–∞–º–∏ –≤ –±–æ—Ç–æ–≤.\n\n"
        text += "2Ô∏è‚É£ *–î—Ä—É–∑—å—è –∏ –∑–Ω–∞–∫–æ–º—ã–µ*\n"
        text += "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É —Ç–µ–º, –∫—Ç–æ –µ—â—ë –Ω–µ –∑–Ω–∞–µ—Ç –ø—Ä–æ –±–æ—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–°–º–æ—Ç—Ä–∏, —ç—Ç–æ—Ç –±–æ—Ç —Å–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏–∑ TikTok –∏ Pinterest, –ø–æ–ø—Ä–æ–±—É–π –ø–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ¬ª.\n\n"
        text += "3Ô∏è‚É£ *–¢–µ–ª–µ–≥—Ä–∞–º-—á–∞—Ç—ã –∏ –≥—Ä—É–ø–ø—ã*\n"
        text += "–î–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π –≤ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —á–∞—Ç–∞—Ö, –≥–¥–µ –æ–±—Å—É–∂–¥–∞—é—Ç –≤–∏–¥–µ–æ, TikTok, Pinterest, –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Ç.–¥.\n\n"
        text += "4Ô∏è‚É£ *TikTok –∏ —Å–æ—Ü—Å–µ—Ç–∏*\n"
        text += "–°–Ω–∏–º–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–æ–ª–∏–∫ –æ —Ç–æ–º, –∫–∞–∫ —Ç—ã –ø–æ–ª—å–∑—É–µ—à—å—Å—è –±–æ—Ç–æ–º, –¥–æ–±–∞–≤—å —Å—Å—ã–ª–∫—É –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.\n\n"
        text += "üí∞ *–ë–æ–Ω—É—Å—ã –∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è:*\n"
        text += "‚Ä¢ –ó–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî *+20 –º–æ–Ω–µ—Ç*\n"
        text += "‚Ä¢ –ó–∞ —Å–∫–∞—á–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ ‚Äî *+1 –º–æ–Ω–µ—Ç–∞*\n"
        text += "‚Ä¢ –ó–∞ —Å–∫–∞—á–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –¥—Ä—É–≥–æ–º ‚Äî *+0.5 –º–æ–Ω–µ—Ç—ã*\n"
        text += "‚Ä¢ –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ‚Äî *+10 –º–æ–Ω–µ—Ç*"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="referral_system")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=False)
    
    elif data.startswith('ref_buy_'):
        print(f"DEBUG: Processing ref_buy_ callback: {data}")
        try:
            ref_info = await ref.get_referral_info(user.id)
            print(f"DEBUG: ref_info = {ref_info}")
            if not ref_info:
                print("DEBUG: No ref_info found")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            package_map = {
                'ref_buy_full_year': {'name': '–ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –Ω–∞ –≥–æ–¥', 'cost': 17599, 'features': ['4k', 'unlimited', 'mass_download'], 'days': 365},
                'ref_buy_full_month': {'name': '–ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –Ω–∞ –º–µ—Å—è—Ü', 'cost': 2600, 'features': ['4k', 'unlimited', 'mass_download'], 'days': 30},
                'ref_buy_4k_unlimited': {'name': '4K + –ë–µ–∑–ª–∏–º–∏—Ç', 'cost': 1800, 'features': ['4k', 'unlimited'], 'days': 30},
                'ref_buy_mass': {'name': '–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞', 'cost': 360, 'features': ['mass_download'], 'days': 30},
            }
            
            package = package_map.get(data)
            print(f"DEBUG: package = {package}")
            if not package:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            current_balance = ref_info['coins_balance']
            print(f"DEBUG: current_balance={current_balance}, cost={package['cost']}")
            if current_balance < package['cost']:
                print("DEBUG: Not enough coins")
                await query.edit_message_text(
                    f"‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!*\n\n"
                    f"–ù—É–∂–Ω–æ: {package['cost']} –º–æ–Ω–µ—Ç\n"
                    f"–£ –≤–∞—Å: {current_balance} –º–æ–Ω–µ—Ç\n"
                    f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {package['cost'] - current_balance} –º–æ–Ω–µ—Ç\n\n"
                    f"–ü—Ä–æ–¥–æ–ª–∂–∞–π –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –º–æ–Ω–µ—Ç—ã! üí∞",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            print("DEBUG: Attempting to spend coins")
            success = await ref.spend_coins(user.id, package['cost'], f"–ü–æ–∫—É–ø–∫–∞ {package['name']}")
            print(f"DEBUG: spend_coins result = {success}")
            if success:
                print("DEBUG: Adding subscriptions")
                for feature in package['features']:
                    await db.add_subscription(user.id, [feature], package['days'])
                
                new_balance = current_balance - package['cost']
                print(f"DEBUG: Purchase successful, new_balance = {new_balance}")
                await query.edit_message_text(
                    f"üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n\n"
                    f"–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª *{package['name']}* –∑–∞ {package['cost']} –º–æ–Ω–µ—Ç!\n\n"
                    f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç\n\n"
                    f"–§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é! ‚ö°\n\n"
                    f"–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –∏—Å–ø–æ–ª—å–∑—É–π /start",
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                print("DEBUG: Failed to spend coins")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –º–æ–Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except Exception as e:
            print(f"ERROR in ref_buy handler: {e}")
            import traceback
            traceback.print_exc()
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    elif data == 'show_packages':
        keyboard = [
            [InlineKeyboardButton("Full ‚Äî 149 ‚ÇΩ / –º–µ—Å—è—Ü", callback_data="buy_full")],
            [InlineKeyboardButton("Full+ ‚Äî 1099 ‚ÇΩ / –≥–æ–¥", callback_data="buy_full_plus")],
            [InlineKeyboardButton("4K + –ë–µ–∑–ª–∏–º–∏—Ç ‚Äî 99 ‚ÇΩ", callback_data="buy_4k_unlimited")],
            [InlineKeyboardButton("–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ ‚Äî 75 ‚ÇΩ", callback_data="buy_mass_download")],
            [InlineKeyboardButton("–ë–µ–∑–ª–∏–º–∏—Ç –Ω–∞ –≤–∏–¥–µ–æ ‚Äî 75 ‚ÇΩ", callback_data="buy_unlimited")],
            [InlineKeyboardButton("4K ‚Äî 75 ‚ÇΩ", callback_data="buy_4k")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üíé *–†–∞–∑–¥–µ–ª Plus+*\n\n"
            "–ü–æ–ª—É—á–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "üöÄ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ\n"
            "üé¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 4K –≤–∏–¥–µ–æ\n"
            "üì¶ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞\n\n"
            "–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞–∫–µ—Ç üëá",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif data.startswith('dl_'):
        parts = data.split('_', 2)
        
        download_id = parts[2] if len(parts) > 2 else parts[1]
        pending = await db.get_pending_download(download_id)
        
        if not pending:
            await query.answer("–û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É —Å–Ω–æ–≤–∞.", show_alert=True)
            return
        
        url = pending['url']
        
        if parts[1] == 'audio':
            quality = None
            audio_only = True
        elif parts[1] == 'video':
            quality = None
            audio_only = False
        else:
            quality = parts[1]
            audio_only = False
        
        await db.delete_pending_download(download_id)
        
        if url:
            try:
                await query.message.delete()
            except:
                pass
            
            loading_msg = await query.message.reply_text(
                "‚è≥ *–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...*\n\n"
                "‚ö° –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 5-15 —Å–µ–∫—É–Ω–¥\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...",
                parse_mode=ParseMode.MARKDOWN
            )
            
            try:
                filename = await downloader.download_video(url, quality, audio_only)
                
                if filename and os.path.exists(filename):
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
                    file_size_mb = os.path.getsize(filename) / (1024 * 1024)
                    logger.info(f"Downloaded file size: {file_size_mb:.2f} MB")
                    
                    # –î–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (>2GB) - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ª–∏–º–∏—Ç
                    if file_size_mb > 2000:
                        os.remove(filename)
                        await loading_msg.edit_text(
                            f"‚ö†Ô∏è *–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!*\n\n"
                            f"üì¶ –†–∞–∑–º–µ—Ä: *{file_size_mb:.1f} MB*\n"
                            f"üö´ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç: *2000 MB*\n\n"
                            f"üí° –í—ã–±–µ—Ä–∏ –º–µ–Ω—å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (720p, 480p –∏–ª–∏ 360p)",
                            parse_mode=ParseMode.MARKDOWN
                        )
                        asyncio.create_task(delete_message_later(context, query.message.chat_id, loading_msg.message_id, 40))
                        return
                    
                    platform = 'pinterest' if 'pinterest.com' in url or 'pin.it' in url else 'tiktok'
                    await db.add_download(user.id, platform)
                    
                    await ref.process_download_coins(user.id)
                    
                    try:
                        if audio_only:
                            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞...")
                            with open(filename, 'rb') as audio_file:
                                await query.message.reply_audio(
                                    audio=audio_file,
                                    caption="‚úÖ *–ì–æ—Ç–æ–≤–æ!*\n\nüéß –í–æ—Ç —Ç–≤–æ–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—à—å—Å—è ‚ö°*MaxSaver*",
                                    parse_mode=ParseMode.MARKDOWN,
                                    read_timeout=300,
                                    write_timeout=300
                                )
                            logger.info("–ê—É–¥–∏–æ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                        elif file_size_mb > 50:
                            # –ë–æ–ª—å—à–∏–µ –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç (–ª–∏–º–∏—Ç 2GB –≤–º–µ—Å—Ç–æ 50MB)
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –±–æ–ª—å—à–æ–≥–æ –≤–∏–¥–µ–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç ({file_size_mb:.1f} MB)...")
                            
                            # –î–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                            if file_size_mb > 500:
                                await loading_msg.edit_text(
                                    f"üì§ *–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ ({file_size_mb:.1f} MB)*\n\n"
                                    f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\n"
                                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ —á–∞—Ç...",
                                    parse_mode=ParseMode.MARKDOWN
                                )
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ –ø—É—Ç–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ (–Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ –ø–∞–º—è—Ç—å)
                            await query.message.reply_document(
                                document=open(filename, 'rb'),
                                caption=f"‚úÖ *–ì–æ—Ç–æ–≤–æ!*\n\nüé¨ –í–∏–¥–µ–æ ({file_size_mb:.1f} MB)\n\nüì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞\n–í–∏–¥–µ–æ –º–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä—è–º–æ –≤ Telegram!\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—à—å—Å—è ‚ö°*MaxSaver*",
                                parse_mode=ParseMode.MARKDOWN,
                                read_timeout=1800,
                                write_timeout=1800,
                                connect_timeout=300,
                                pool_timeout=300
                            )
                            logger.info("–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                        else:
                            # –ú–∞–ª–µ–Ω—å–∫–∏–µ –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≤–∏–¥–µ–æ
                            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ...")
                            with open(filename, 'rb') as video_file:
                                await query.message.reply_video(
                                    video=video_file,
                                    caption="‚úÖ *–ì–æ—Ç–æ–≤–æ!*\n\nüé¨ –í–æ—Ç —Ç–≤–æ—ë –≤–∏–¥–µ–æ –±–µ–∑ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—à—å—Å—è ‚ö°*MaxSaver*",
                                    parse_mode=ParseMode.MARKDOWN,
                                    supports_streaming=True,
                                    read_timeout=300,
                                    write_timeout=300
                                )
                            logger.info("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    except Exception as send_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(send_error)}", exc_info=True)
                        await loading_msg.edit_text(
                            "üö´ *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞*\n\n"
                            "–í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é.\n"
                            "–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –º–µ–Ω—å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ.",
                            parse_mode=ParseMode.MARKDOWN
                        )
                        raise
                    finally:
                        if os.path.exists(filename):
                            logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {filename}")
                            os.remove(filename)
                    
                    try:
                        await loading_msg.delete()
                    except Exception as del_error:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏: {del_error}")
                else:
                    await loading_msg.edit_text(
                        "üö´ *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ*\n\n"
                        "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                        "‚Ä¢ –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
                        "‚Ä¢ –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞\n"
                        "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\n\n"
                        "‚öôÔ∏è –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
                        parse_mode=ParseMode.MARKDOWN
                    )
                    asyncio.create_task(delete_message_later(context, query.message.chat_id, loading_msg.message_id, 30))
            except Exception as e:
                print(f"Download error: {e}")
                await loading_msg.edit_text(
                    "üö´ *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ*\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
                    "‚Ä¢ –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞\n"
                    "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\n\n"
                    "‚öôÔ∏è –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
                    parse_mode=ParseMode.MARKDOWN
                )
                asyncio.create_task(delete_message_later(context, query.message.chat_id, loading_msg.message_id, 30))
    
    elif data.startswith('admin_') and user.id in ADMIN_IDS:
        if data == 'admin_send_push':
            await query.edit_message_text(
                "üì¢ *–û—Ç–ø—Ä–∞–≤–∏—Ç—å Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`push:—Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è`\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "`push:–ù–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞! –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 4K –≤–∏–¥–µ–æ`",
                parse_mode=ParseMode.MARKDOWN
            )
        elif data == 'admin_delete_push':
            await query.edit_message_text(
                "üóë *–£–¥–∞–ª–∏—Ç—å Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å ID —Å–æ–æ–±—â–µ–Ω–∏—è:",
                parse_mode=ParseMode.MARKDOWN
            )
            context.user_data['admin_action'] = 'delete_push'
        elif data == 'admin_add_sponsors':
            await query.edit_message_text(
                "üë• *–î–æ–±–∞–≤–∏—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–æ–≤*\n\n"
                "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`S:—á–∏—Å–ª–æ`\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: `S:3` –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è 3 —Å–ø–æ–Ω—Å–æ—Ä–æ–≤",
                parse_mode=ParseMode.MARKDOWN
            )
            context.user_data['admin_action'] = 'add_sponsors'
        elif data == 'admin_remove_sponsors':
            await query.edit_message_text(
                "‚ùå *–£–±—Ä–∞—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–æ–≤*\n\n"
                "–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:\n"
                "‚Ä¢ `all` - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö\n"
                "‚Ä¢ `one` - —É–¥–∞–ª–∏—Ç—å –æ–¥–Ω–æ–≥–æ",
                parse_mode=ParseMode.MARKDOWN
            )
            context.user_data['admin_action'] = 'remove_sponsors'
        elif data == 'admin_stats':
            stats = await db.get_statistics()
            users_count = await db.get_all_users_count()
            active_subs = await db.get_active_subscriptions_count()
            await query.edit_message_text(
                f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{users_count}*\n"
                f"üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: *{active_subs}*\n"
                f"üì• –í—Å–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: *{stats['total_downloads']}*\n"
                f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: *{stats['total_revenue']:.2f} ‚ÇΩ*",
                parse_mode=ParseMode.MARKDOWN
            )
        elif data == 'admin_user_info':
            await query.edit_message_text(
                "üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                parse_mode=ParseMode.MARKDOWN
            )
            context.user_data['admin_action'] = 'user_info'
        elif data == 'admin_block':
            await query.edit_message_text(
                "üö´ *–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
                parse_mode=ParseMode.MARKDOWN
            )
            context.user_data['admin_action'] = 'block'
        elif data == 'admin_unblock':
            await query.edit_message_text(
                "‚úÖ *–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
                parse_mode=ParseMode.MARKDOWN
            )
            context.user_data['admin_action'] = 'unblock'
        elif data == 'admin_give_package':
            await query.edit_message_text(
                "üíé *–í—ã–¥–∞—Ç—å –ø–∞–∫–µ—Ç*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`user_id package`\n\n"
                "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:* full, full\\_plus, 4k\\_unlimited, mass\\_download, unlimited, 4k",
                parse_mode=ParseMode.MARKDOWN
            )
            context.user_data['admin_action'] = 'give_package'
        elif data == 'admin_remove_feature':
            await query.edit_message_text(
                "‚ùå *–£–¥–∞–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`user_id feature`\n\n"
                "*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:* 4k, unlimited, mass\\_download",
                parse_mode=ParseMode.MARKDOWN
            )
            context.user_data['admin_action'] = 'remove_feature'
        elif data == 'admin_removeall':
            await query.edit_message_text(
                "üóë *–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                parse_mode=ParseMode.MARKDOWN
            )
            context.user_data['admin_action'] = 'removeall'
        elif data == 'admin_extend':
            await query.edit_message_text(
                "‚è∞ *–ü—Ä–æ–¥–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`user_id feature days`",
                parse_mode=ParseMode.MARKDOWN
            )
            context.user_data['admin_action'] = 'extend'

async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    if user.id not in ADMIN_IDS:
        return
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="admin_send_push")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="admin_delete_push")],
        [InlineKeyboardButton("üë• –°–ø–æ–Ω—Å–æ—Ä—ã", callback_data="admin_add_sponsors")],
        [InlineKeyboardButton("‚ùå –£–±—Ä–∞—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–æ–≤", callback_data="admin_remove_sponsors")],
        [InlineKeyboardButton("üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", callback_data="admin_user_info")],
        [InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_block")],
        [InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_unblock")],
        [InlineKeyboardButton("üíé –í—ã–¥–∞—Ç—å –ø–∞–∫–µ—Ç", callback_data="admin_give_package")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é", callback_data="admin_remove_feature")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏", callback_data="admin_removeall")],
        [InlineKeyboardButton("‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é", callback_data="admin_extend")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üîß *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    if user.id not in ADMIN_IDS:
        return
    
    args = context.args
    if not args:
        await update.message.reply_text(
            "üîß *–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:*\n\n"
            "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            "/admin stats \\- –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:*\n"
            "/admin block \\[user\\_id\\] \\- –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å\n"
            "/admin unblock \\[user\\_id\\] \\- —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å\n"
            "/admin info \\[user\\_id\\] \\- –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n\n"
            "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:*\n"
            "/admin give \\[user\\_id\\] \\[package\\] \\- –≤—ã–¥–∞—Ç—å –ø–∞–∫–µ—Ç\n"
            "/admin remove \\[user\\_id\\] \\[feature\\] \\- —É–¥–∞–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é\n"
            "/admin removeall \\[user\\_id\\] \\- —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
            "/admin extend \\[user\\_id\\] \\[feature\\] \\[days\\] \\- –ø—Ä–æ–¥–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é\n\n"
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:* full, full\\_plus, 4k\\_unlimited, mass\\_download, unlimited, 4k\n"
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:* 4k, unlimited, mass\\_download",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    command = args[0]
    
    if command == 'stats':
        stats = await db.get_statistics()
        users_count = await db.get_all_users_count()
        active_subs = await db.get_active_subscriptions_count()
        await update.message.reply_text(
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{users_count}*\n"
            f"üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: *{active_subs}*\n"
            f"üì• –í—Å–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: *{stats['total_downloads']}*\n"
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: *{stats['total_revenue']:.2f} ‚ÇΩ*",
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif command == 'block' and len(args) > 1:
        target_id = int(args[1])
        await db.block_user(target_id)
        await update.message.reply_text(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    
    elif command == 'unblock' and len(args) > 1:
        target_id = int(args[1])
        await db.unblock_user(target_id)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    
    elif command == 'info' and len(args) > 1:
        target_id = int(args[1])
        user_info = await db.get_user_info(target_id)
        if user_info:
            subs = await db.get_user_subscriptions(target_id)
            ref_info = await ref.get_referral_info(target_id)
            blocked_status = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user_info['is_blocked'] else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
            username = f"@{user_info['username']}" if user_info['username'] else "–ù–µ —É–∫–∞–∑–∞–Ω"
            
            info_text = f"üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:*\n\n"
            info_text += f"ID: `{target_id}`\n"
            info_text += f"–ù–∏–∫: {escape_markdown(username)}\n"
            info_text += f"–°—Ç–∞—Ç—É—Å: {blocked_status}\n"
            info_text += f"–ü–µ—Ä–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ: {user_info['first_seen']}\n\n"
            
            if ref_info:
                info_text += f"üí∞ *–ë–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç:* {ref_info['coins_balance']}\n"
                info_text += f"üë• *–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:* {ref_info['total_referrals']}\n\n"
            
            if subs:
                info_text += "*–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:*\n"
                for sub in subs:
                    info_text += f"‚Ä¢ {sub['feature']} - –¥–æ {sub['expires_at']}\n"
            else:
                info_text += "–ü–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç"
            
            await update.message.reply_text(info_text, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    elif command == 'give' and len(args) > 2:
        target_id = int(args[1])
        package_key = args[2]
        package = PACKAGES.get(package_key)
        
        if package:
            existing_subs = await db.get_user_subscriptions(target_id)
            has_features = set()
            for sub in existing_subs:
                has_features.add(sub['feature'])
            
            new_features = set(package['features'])
            already_has = new_features & has_features
            
            if already_has:
                features_list = ', '.join(already_has)
                await update.message.reply_text(
                    f"‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —É–∂–µ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏: {features_list}\n\n"
                    f"–ü–∞–∫–µ—Ç {package['name']} –≤—Å–µ —Ä–∞–≤–Ω–æ –≤—ã–¥–∞–Ω, –≤—Ä–µ–º—è –ø—Ä–æ–¥–ª–µ–Ω–æ."
                )
            
            await db.add_subscription(target_id, package['features'], package['duration_days'])
            
            try:
                await context.bot.send_message(
                    chat_id=target_id,
                    text=f"üéÅ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n\n"
                         f"–¢–µ–±–µ –±—ã–ª –≤—ã–¥–∞–Ω –ø–∞–∫–µ—Ç *{package['name']}*!\n"
                         f"–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é! ‚ö°",
                    parse_mode=ParseMode.MARKDOWN
                )
            except:
                pass
            
            await update.message.reply_text(f"‚úÖ –ü–∞–∫–µ—Ç {package['name']} –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
        else:
            await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–∫–µ—Ç")
    
    elif command == 'remove' and len(args) > 2:
        target_id = int(args[1])
        feature = args[2]
        await db.remove_user_feature(target_id, feature)
        await update.message.reply_text(f"‚úÖ –§—É–Ω–∫—Ü–∏—è {feature} —É–¥–∞–ª–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}")
    
    elif command == 'removeall' and len(args) > 1:
        target_id = int(args[1])
        await db.remove_all_user_features(target_id)
        await update.message.reply_text(f"‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}")
    
    elif command == 'extend' and len(args) > 3:
        target_id = int(args[1])
        feature = args[2]
        days = int(args[3])
        await db.update_subscription_expiry(target_id, feature, days)
        await update.message.reply_text(f"‚úÖ –§—É–Ω–∫—Ü–∏—è {feature} –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}")

async def main():
    try:
        if not TELEGRAM_TOKEN:
            logger.error("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
            return
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await db.init_db()
        await ref.init_referral_tables()
        
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram...")
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("admin", admin_command))
        application.add_handler(MessageHandler(filters.Regex('^(üìå Pinterest|üéµ TikTok|üì¶ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞|üíé Plus\+|üë§ My Account|üîß Admin Panel)$'), button_handler))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(CallbackQueryHandler(callback_handler))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        await application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}", exc_info=True)
        raise

if __name__ == '__main__':
    asyncio.run(main())
